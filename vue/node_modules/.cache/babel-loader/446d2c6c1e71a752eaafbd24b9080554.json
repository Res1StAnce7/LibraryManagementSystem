{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport request from \"@/utils/request\";\nexport default {\n  name: 'AddUser',\n\n  data() {\n    const checkAge = (rule, value, callback) => {\n      if (!value) {\n        return callback(new Error('Age cannot be empty'));\n      }\n\n      if (!/^[0-9]+$/.test(value)) {\n        callback(new Error('Age must be a number'));\n      }\n\n      if (parseInt(value) > 120 || parseInt(value) <= 0) {\n        callback(new Error('Age must be between 0 and 120'));\n      }\n\n      callback();\n    };\n\n    const checkPhone = (rule, value, callback) => {\n      if (!/^[1][3,4,5,6,7,8,9][0-9]{9}$/.test(value)) {\n        callback(new Error('Enter a valid phone number'));\n      }\n\n      callback();\n    };\n\n    return {\n      form: {\n        gender: 'Male'\n      },\n      rules: {\n        name: [{\n          required: true,\n          message: 'Required',\n          trigger: 'blur'\n        }],\n        age: [{\n          validator: checkAge,\n          trigger: 'blur'\n        }],\n        phone: [{\n          validator: checkPhone,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n\n  methods: {\n    save() {\n      this.$refs['ruleForm'].validate(valid => {\n        if (valid) {\n          request.post('/user/save', this.form).then(res => {\n            if (res.code === '200') {\n              this.$notify.success('Add successfully');\n              this.$refs['ruleForm'].resetFields();\n            } else {\n              this.$notify.error(res.msg);\n            }\n          });\n        }\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":";AA6BA;AAEA;EACAA,eADA;;EAEAC;IACA;MACA;QACA;MACA;;MACA;QACAC;MACA;;MACA;QACAA;MACA;;MACAA;IACA,CAXA;;IAYA;MACA;QACAA;MACA;;MACAA;IACA,CALA;;IAMA;MACAC;QAAAC;MAAA,CADA;MAEAC;QACAL,OACA;UAAAM;UAAAC;UAAAC;QAAA,CADA,CADA;QAIAC,MACA;UAAAC;UAAAF;QAAA,CADA,CAJA;QAOAG,QACA;UAAAD;UAAAF;QAAA,CADA;MAPA;IAFA;EAcA,CAnCA;;EAoCAI;IACAC;MACA;QACA;UACAC;YACA;cACA;cACA;YACA,CAHA,MAGA;cACA;YACA;UACA,CAPA;QAQA;MACA,CAXA;IAYA;;EAdA;AApCA","names":["name","data","callback","form","gender","rules","required","message","trigger","age","validator","phone","methods","save","request"],"sourceRoot":"src/views/user","sources":["AddUser.vue"],"sourcesContent":["<template>\n  <div style=\"width: 80%\">\n    <div style=\"margin-bottom: 30px\">Add User</div>\n    <el-form :inline=\"true\" :model=\"form\" :rules=\"rules\" ref=\"ruleForm\" label-width=\"100px\">\n      <el-form-item label=\"Name\" prop=\"name\">\n        <el-input v-model=\"form.name\" placeholder=\"Name\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"Age\" prop=\"age\">\n        <el-input v-model=\"form.age\" placeholder=\"Age\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"Gender\">\n        <el-radio v-model=\"form.gender\"  label=\"Male\">Male</el-radio>\n        <el-radio v-model=\"form.gender\"  label=\"Female\">Female</el-radio>\n      </el-form-item>\n      <el-form-item label=\"Phone\" prop=\"phone\">\n        <el-input v-model=\"form.phone\" placeholder=\"Phone\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"Address\" prop=\"address\">\n        <el-input v-model=\"form.address\" placeholder=\"Address\"></el-input>\n      </el-form-item>\n    </el-form>\n\n    <div style=\"text-align: center; margin-top: 30px\">\n      <el-button type=\"primary\" @click=\"save\" size=\"medium\">Submit</el-button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport request from \"@/utils/request\";\n\nexport default {\n  name: 'AddUser',\n  data() {\n    const checkAge = (rule, value, callback) => {\n      if (!value) {\n        return callback(new Error('Age cannot be empty'));\n      }\n      if (!/^[0-9]+$/.test(value)) {\n        callback(new Error('Age must be a number'));\n      }\n      if (parseInt(value) > 120 || parseInt(value) <= 0) {\n        callback(new Error('Age must be between 0 and 120'));\n      }\n      callback()\n    };\n    const checkPhone = (rule, value, callback) => {\n      if (!/^[1][3,4,5,6,7,8,9][0-9]{9}$/.test(value)) {\n        callback(new Error('Enter a valid phone number'));\n      }\n      callback()\n    };\n    return {\n      form: {gender: 'Male'},\n      rules: {\n        name: [\n          { required: true, message: 'Required', trigger: 'blur'}\n        ],\n        age: [\n          { validator: checkAge, trigger: 'blur' }\n        ],\n        phone: [\n          { validator: checkPhone, trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  methods: {\n    save() {\n      this.$refs['ruleForm'].validate((valid) => {\n        if (valid) {\n          request.post('/user/save', this.form).then(res => {\n            if (res.code === '200') {\n              this.$notify.success('Add successfully')\n              this.$refs['ruleForm'].resetFields()\n            } else {\n              this.$notify.error(res.msg)\n            }\n          })\n        }\n      })\n    }\n  }\n}\n\n</script>\n\n"]},"metadata":{},"sourceType":"module"}