{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport request from \"@/utils/request\";\nimport Cookies from \"js-cookie\";\nexport default {\n  name: 'AddBook',\n\n  data() {\n    const checkNums = (rule, value, callback) => {\n      value = parseInt(value);\n\n      if (value < 0 || value >= 1000) {\n        callback(new Error('Quantity must be between 0 and 1000'));\n      }\n\n      callback();\n    };\n\n    return {\n      admin: Cookies.get('admin') ? JSON.parse(Cookies.get('admin')) : {},\n      form: {\n        score: 10,\n        cover: ''\n      },\n      categories: [],\n      rules: {\n        name: [{\n          required: true,\n          message: 'Input the book name',\n          trigger: 'blur'\n        }],\n        bookNo: [{\n          required: true,\n          message: 'Input the book code',\n          trigger: 'blur'\n        }],\n        score: [{\n          validator: checkNums,\n          trigger: 'blur'\n        }],\n        nums: [{\n          required: true,\n          message: 'Inout the quantity',\n          trigger: 'blur'\n        }, {\n          validator: checkNums,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n\n  created() {\n    request.get('/category/tree').then(res => {\n      this.categories = res.data;\n    });\n  },\n\n  methods: {\n    handleCoverSuccess(res) {\n      if (res.code === '200') {\n        console.log(res.data);\n        this.form.cover = res.data;\n      }\n    },\n\n    save() {\n      this.$refs['ruleForm'].validate(valid => {\n        if (valid) {\n          request.post('/book/save', this.form).then(res => {\n            if (res.code === '200') {\n              this.$notify.success('Add book successfully');\n              this.$refs['ruleForm'].resetFields();\n            } else {\n              this.$notify.error(res.msg);\n            }\n          });\n        }\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":";AA8DA;AACA;AAEA;EACAA,eADA;;EAEAC;IACA;MACAC;;MACA;QACAC;MACA;;MACAA;IACA,CANA;;IAOA;MACAC,mEADA;MAEAC;QAAAC;QAAAC;MAAA,CAFA;MAGAC,cAHA;MAIAC;QACAT,OACA;UAAAU;UAAAC;UAAAC;QAAA,CADA,CADA;QAIAC,SACA;UAAAH;UAAAC;UAAAC;QAAA,CADA,CAJA;QAOAN,QACA;UAAAQ;UAAAF;QAAA,CADA,CAPA;QAUAG,OACA;UAAAL;UAAAC;UAAAC;QAAA,CADA,EAEA;UAAAE;UAAAF;QAAA,CAFA;MAVA;IAJA;EAoBA,CA9BA;;EA+BAI;IACAC;MACA;IACA,CAFA;EAGA,CAnCA;;EAoCAC;IACAC;MACA;QACAC;QACA;MACA;IACA,CANA;;IAOAC;MACA;QACA;UACAJ;YACA;cACA;cACA;YACA,CAHA,MAGA;cACA;YACA;UACA,CAPA;QAQA;MACA,CAXA;IAYA;;EApBA;AApCA","names":["name","data","value","callback","admin","form","score","cover","categories","rules","required","message","trigger","bookNo","validator","nums","created","request","methods","handleCoverSuccess","console","save"],"sourceRoot":"src/views/book","sources":["Add.vue"],"sourcesContent":["<template>\r\n  <div style=\"width: 80%\">\r\n    <div style=\"margin-bottom: 30px\">Add Book</div>\r\n    <el-form :inline=\"true\" :rules=\"rules\" ref=\"ruleForm\" :model=\"form\" label-width=\"100px\">\r\n      <el-form-item label=\"Name\" prop=\"name\">\r\n        <el-input v-model=\"form.name\" placeholder=\"Input the name\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"Description\" prop=\"description\">\r\n        <el-input style=\"width: 400px\" type=\"textarea\" v-model=\"form.description\" placeholder=\"Input the description\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"Date of Publish\" prop=\"publishDate\">\r\n        <el-date-picker\r\n            v-model=\"form.publishDate\"\r\n            type=\"date\"\r\n            value-format=\"yyyy-MM-dd\"\r\n            placeholder=\"Select the date of publish\">\r\n        </el-date-picker>\r\n      </el-form-item>\r\n      <el-form-item label=\"Author\" prop=\"author\">\r\n        <el-input v-model=\"form.author\" placeholder=\"Input the author\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"Publisher\" prop=\"publisher\">\r\n        <el-input v-model=\"form.publisher\" placeholder=\"Input the publisher\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"Category\" prop=\"category\">\r\n        <el-cascader\r\n            placeholder=\"Select the category\"\r\n            style=\"width: 220px\"\r\n            :props=\"{ value: 'name', label: 'name'}\"\r\n            v-model=\"form.categories\"\r\n            :options=\"categories\"></el-cascader>\r\n      </el-form-item>\r\n      <el-form-item label=\"Book Code\" prop=\"bookNo\">\r\n        <el-input v-model=\"form.bookNo\" placeholder=\"Input the Book Code\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"Point\" prop=\"cover\">\r\n        <el-input-number v-model=\"form.score\" :min=\"10\" :max=\"30\" label=\"Point Needed\"></el-input-number>\r\n      </el-form-item>\r\n      <el-form-item label=\"Quantity\" prop=\"nums\">\r\n        <el-input v-model=\"form.nums\" placeholder=\"Input the Quantity\"></el-input>\r\n      </el-form-item>\r\n      <br>\r\n      <el-form-item label=\"Cover\" prop=\"cover\">\r\n        <el-upload\r\n            class=\"avatar-uploader\"\r\n            :action=\"'http://localhost:9090/api/book/file/upload?token=' + this.admin.token\"\r\n            :show-file-list=\"false\"\r\n            :on-success=\"handleCoverSuccess\"\r\n        >\r\n          <img v-if=\"form.cover\" :src=\"form.cover\" class=\"avatar\" alt=\"\">\r\n          <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\r\n        </el-upload>\r\n      </el-form-item>\r\n    </el-form>\r\n\r\n    <div style=\"text-align: center; margin-top: 30px\">\r\n      <el-button type=\"primary\" @click=\"save\" size=\"medium\">Submit</el-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport request from \"@/utils/request\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nexport default {\r\n  name: 'AddBook',\r\n  data() {\r\n    const checkNums = (rule, value, callback) => {\r\n      value = parseInt(value)\r\n      if (value < 0 || value >= 1000) {\r\n        callback(new Error('Quantity must be between 0 and 1000'));\r\n      }\r\n      callback()\r\n    };\r\n    return {\r\n      admin: Cookies.get('admin') ? JSON.parse(Cookies.get('admin')) : {},\r\n      form: {  score: 10, cover: '' },\r\n      categories: [],\r\n      rules: {\r\n        name: [\r\n          { required: true, message: 'Input the book name', trigger: 'blur'}\r\n        ],\r\n        bookNo: [\r\n          { required: true, message: 'Input the book code', trigger: 'blur'}\r\n        ],\r\n        score: [\r\n          { validator: checkNums, trigger: 'blur' }\r\n        ],\r\n        nums: [\r\n          { required: true, message: 'Inout the quantity', trigger: 'blur'},\r\n          { validator: checkNums, trigger: 'blur' }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    request.get('/category/tree').then(res => {\r\n      this.categories = res.data\r\n    })\r\n  },\r\n  methods: {\r\n    handleCoverSuccess(res) {\r\n      if (res.code === '200') {\r\n        console.log(res.data)\r\n        this.form.cover = res.data\r\n      }\r\n    },\r\n    save() {\r\n      this.$refs['ruleForm'].validate((valid) => {\r\n        if (valid) {\r\n          request.post('/book/save', this.form).then(res => {\r\n            if (res.code === '200') {\r\n              this.$notify.success('Add book successfully')\r\n              this.$refs['ruleForm'].resetFields()\r\n            } else {\r\n              this.$notify.error(res.msg)\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style>\r\n.avatar-uploader .el-upload {\r\n  border: 1px dashed #d9d9d9;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n.avatar-uploader .el-upload:hover {\r\n  border-color: #409EFF;\r\n}\r\n.avatar-uploader-icon {\r\n  font-size: 28px;\r\n  color: #8c939d;\r\n  width: 178px;\r\n  height: 178px;\r\n  line-height: 178px;\r\n  text-align: center;\r\n}\r\n.avatar {\r\n  width: 178px;\r\n  height: 178px;\r\n  display: block;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}